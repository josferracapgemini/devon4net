<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BaseNameProject.WebAPI.Implementation</name>
    </assembly>
    <members>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController">
            <summary>
            Auth controller sample.
            Please remember to avoid the use ob logic in a controller !!!
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.#ctor(Microsoft.Extensions.Options.IOptions{Devon4Net.Infrastructure.Common.Options.JWT.JwtOptions},Devon4Net.Infrastructure.JWT.Handlers.IJwtHandler)">
            <summary>
            COnstructor with DI
            </summary>
            <param name="jwtOptions"></param>
            <param name="jwtHandler"></param>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.Login(System.String,System.String)">
            <summary>
            Performs the login proces via the user/password flow
            This is only a sample. Please avoid any logic on the controller.
            </summary>
            <returns>LoginResponse class will provide the JWT token to securize the server calls</returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.CurrentUser">
            <summary>
            Provides the information related to the logged user
            This is only a sample. Please never put any logic on a controller
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo">
            <summary>
            CorporateBasicInfo definition
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Id">
            <summary>
            the identifier
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Value">
            <summary>
            the provided value
            </summary>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse">
            <summary>
            CurrentUserResponse definition
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.CorporateInfo">
            <summary>
            List of claims
            </summary>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.LoginResponse">
            <summary>
            LoginResponse
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.AuthManagement.Dto.LoginResponse.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController">
            <summary>
            Employees controller
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.#ctor(BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService)">
            <summary>
            Constructor
            </summary>
            <param name="EmployeeService"></param>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.GetEmployee">
            <summary>
            Gets the entire list of employees
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.Create(BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto)">
            <summary>
            Creates an employee
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.Delete(System.Int64)">
            <summary>
            Deletes the employee provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.ModifyEmployee(BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto)">
            <summary>
            Modifies the done status of the employee provided the data of the employee
            In this sample, all the data fields are mandatory
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Converters.EmployeeConverter">
            <summary>
            TodoConverter
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Converters.EmployeeConverter.ModelToDto(BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee)">
            <summary>
            ModelToDto TODO transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto">
            <summary>
            Employee definition
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Id">
            <summary>
            the Id
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Name">
            <summary>
            the Name
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Surname">
            <summary>
            the Surname
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Mail">
            <summary>
            the Mail
            </summary>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException">
            <summary>
            Custom exception EmployeeNotFoundException
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService">
            <summary>
            Employee service implementation
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{BaseNameProject.WebAPI.Implementation.Domain.Database.EmployeeContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.GetEmployee(System.Linq.Expressions.Expression{System.Func{BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            Gets the Employee
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.GetEmployeeById(System.Int64)">
            <summary>
            Gets the Employee by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.CreateEmployee(System.String,System.String,System.String)">
            <summary>
            Creates the Employee
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.DeleteEmployeeById(System.Int64)">
            <summary>
            Deletes the Employee by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.ModifyEmployeeById(System.Int64,System.String,System.String,System.String)">
            <summary>
            Modifies te state of the Employee by id
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService">
            <summary>
            IEmployeeService
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.GetEmployee(System.Linq.Expressions.Expression{System.Func{BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            GetEmployee
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.GetEmployeeById(System.Int64)">
            <summary>
            GetEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.CreateEmployee(System.String,System.String,System.String)">
            <summary>
            CreateEmployee
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.DeleteEmployeeById(System.Int64)">
            <summary>
            DeleteEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.ModifyEmployeeById(System.Int64,System.String,System.String,System.String)">
            <summary>
            ModifyEmployeeById
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController">
            <summary>
            TODOs controller
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.#ctor(BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService)">
            <summary>
            Constructor
            </summary>
            <param name="todoService"></param>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.GetTodo">
            <summary>
            Gets the entire list of TODOS
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.Create(System.String)">
            <summary>
            Creates the TODO
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.Delete(System.Int64)">
            <summary>
            Deletes the TODO provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.ModifyTodo(System.Int64)">
            <summary>
            Modifies the done status of the TODO provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Converters.TodoConverter">
            <summary>
            TodoConverter
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Converters.TodoConverter.ModelToDto(BaseNameProject.WebAPI.Implementation.Domain.Entities.Todos)">
            <summary>
            ModelToDto TODO transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto">
            <summary>
            TodoDto definition
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService">
            <summary>
            TodoService interface
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.GetTodo(System.Linq.Expressions.Expression{System.Func{BaseNameProject.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            GetTodo
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.GetTodoById(System.Int64)">
            <summary>
            GetTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.CreateTodo(System.String)">
            <summary>
            CreateTodo
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.DeleteTodoById(System.Int64)">
            <summary>
            DeleteTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.ModifyTodoById(System.Int64)">
            <summary>
            ModifyTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.TodoService">
            <summary>
            TODO service implementation
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{BaseNameProject.WebAPI.Implementation.Domain.Database.TodoContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.GetTodo(System.Linq.Expressions.Expression{System.Func{BaseNameProject.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            Gets the TODO
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.GetTodoById(System.Int64)">
            <summary>
            Gets the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.CreateTodo(System.String)">
            <summary>
            Creates the TODO
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.DeleteTodoById(System.Int64)">
            <summary>
            Deletes the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.ModifyTodoById(System.Int64)">
            <summary>
            Modifies te state of the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Configure.DevonConfiguration">
            <summary>
            DevonConfiguration
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Configure.DevonConfiguration.SetupDevonDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Sets up the service dependency injection
            For example:
            services.AddTransient"ITodoService, TodoService"();
            services.AddTransient"ITodoRepository, TodoRepository"();
            Put your DI declarations here
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Data.Repositories.EmployeeRepository">
            <summary>
            Repository implementation for the Employee
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.EmployeeRepository.#ctor(BaseNameProject.WebAPI.Implementation.Domain.Database.EmployeeContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.EmployeeRepository.GetEmployee(System.Linq.Expressions.Expression{System.Func{BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            Get TODO method
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.EmployeeRepository.GetEmployeeById(System.Int64)">
            <summary>
            Geto the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.EmployeeRepository.Create(System.String,System.String,System.String)">
            <summary>
            Creates the TODO
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.EmployeeRepository.DeleteEmployeeById(System.Int64)">
            <summary>
            Deletes the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Data.Repositories.TodoRepository">
            <summary>
            Repository implementation for the TODOS
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.TodoRepository.#ctor(BaseNameProject.WebAPI.Implementation.Domain.Database.TodoContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.TodoRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{BaseNameProject.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            Get TODO method
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.TodoRepository.GetTodoById(System.Int64)">
            <summary>
            Geto the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.TodoRepository.Create(System.String)">
            <summary>
            Creates the TODO
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Data.Repositories.TodoRepository.DeleteTodoById(System.Int64)">
            <summary>
            Deletes the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Domain.Database.EmployeeContext">
            <summary>
            Employee database context definition
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.Database.EmployeeContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{BaseNameProject.WebAPI.Implementation.Domain.Database.EmployeeContext})">
            <summary>
            Employee context definition
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Domain.Database.EmployeeContext.Employee">
            <summary>
            Dbset
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.Database.EmployeeContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Any extra configuration should be here
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.Database.EmployeeContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Model rules definition
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Domain.Database.TodoContext">
            <summary>
            TODO context definition
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.Database.TodoContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{BaseNameProject.WebAPI.Implementation.Domain.Database.TodoContext})">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Domain.Database.TodoContext.Todos">
            <summary>
            Dbset
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.Database.TodoContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Any extra configuration should be here
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.Database.TodoContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Model rules definition
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee">
            <summary>
            Entity class for Employee
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee.Surname">
            <summary>
            Surname
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee.Mail">
            <summary>
            mail
            </summary>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Domain.Entities.Todos">
            <summary>
            Entity class for Todos
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Domain.Entities.Todos.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Domain.Entities.Todos.Description">
            <summary>
            Description 
            </summary>
        </member>
        <member name="P:BaseNameProject.WebAPI.Implementation.Domain.Entities.Todos.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository">
            <summary>
            EmployeeRepository interface
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.GetEmployee(System.Linq.Expressions.Expression{System.Func{BaseNameProject.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            GetEmployee
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.GetEmployeeById(System.Int64)">
            <summary>
            GetEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.Create(System.String,System.String,System.String)">
            <summary>
            Create
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.DeleteEmployeeById(System.Int64)">
            <summary>
            DeleteEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository">
            <summary>
            TodoRepository interface
            </summary>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{BaseNameProject.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            Get Todos
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.GetTodoById(System.Int64)">
            <summary>
            GetTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.Create(System.String)">
            <summary>
            Create
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:BaseNameProject.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.DeleteTodoById(System.Int64)">
            <summary>
            DeleteTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
    </members>
</doc>
